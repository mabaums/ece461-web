/**
 * ECE 461 - Spring 2023 - Project 2
 * API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
 *
 * OpenAPI spec version: 2.0.0
 * Contact: davisjam@purdue.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AuthenticationRequest } from '../model/authenticationRequest';
import { AuthenticationToken } from '../model/authenticationToken';
import { EnumerateOffset } from '../model/enumerateOffset';
import { ModelPackage } from '../model/modelPackage';
import { PackageData } from '../model/packageData';
import { PackageHistoryEntry } from '../model/packageHistoryEntry';
import { PackageID } from '../model/packageID';
import { PackageMetadata } from '../model/packageMetadata';
import { PackageName } from '../model/packageName';
import { PackageQuery } from '../model/packageQuery';
import { PackageRating } from '../model/packageRating';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Create an access token.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAuthToken(body: AuthenticationRequest, observe?: 'body', reportProgress?: boolean): Observable<AuthenticationToken>;
    public createAuthToken(body: AuthenticationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticationToken>>;
    public createAuthToken(body: AuthenticationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticationToken>>;
    public createAuthToken(body: AuthenticationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createAuthToken.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AuthenticationToken>('put',`${this.basePath}/authenticate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete all versions of this package.
     * 
     * @param xAuthorization 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public packageByNameDelete(xAuthorization: AuthenticationToken, name: PackageName, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public packageByNameDelete(xAuthorization: AuthenticationToken, name: PackageName, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public packageByNameDelete(xAuthorization: AuthenticationToken, name: PackageName, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public packageByNameDelete(xAuthorization: AuthenticationToken, name: PackageName, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (xAuthorization === null || xAuthorization === undefined) {
            throw new Error('Required parameter xAuthorization was null or undefined when calling packageByNameDelete.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling packageByNameDelete.');
        }

        let headers = this.defaultHeaders;
        if (xAuthorization !== undefined && xAuthorization !== null) {
            headers = headers.set('X-Authorization', String(xAuthorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/package/byName/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Return the history of this package (all versions).
     * @param name 
     * @param xAuthorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public packageByNameGet(name: PackageName, xAuthorization: AuthenticationToken, observe?: 'body', reportProgress?: boolean): Observable<Array<PackageHistoryEntry>>;
    public packageByNameGet(name: PackageName, xAuthorization: AuthenticationToken, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PackageHistoryEntry>>>;
    public packageByNameGet(name: PackageName, xAuthorization: AuthenticationToken, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PackageHistoryEntry>>>;
    public packageByNameGet(name: PackageName, xAuthorization: AuthenticationToken, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling packageByNameGet.');
        }

        if (xAuthorization === null || xAuthorization === undefined) {
            throw new Error('Required parameter xAuthorization was null or undefined when calling packageByNameGet.');
        }

        let headers = this.defaultHeaders;
        if (xAuthorization !== undefined && xAuthorization !== null) {
            headers = headers.set('X-Authorization', String(xAuthorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<PackageHistoryEntry>>('get',`${this.basePath}/package/byName/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get any packages fitting the regular expression.
     * Search for a package using regular expression over package names and READMEs. This is similar to search by name.
     * @param body 
     * @param xAuthorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public packageByRegExGet(body: string, xAuthorization: AuthenticationToken, observe?: 'body', reportProgress?: boolean): Observable<Array<PackageMetadata>>;
    public packageByRegExGet(body: string, xAuthorization: AuthenticationToken, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PackageMetadata>>>;
    public packageByRegExGet(body: string, xAuthorization: AuthenticationToken, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PackageMetadata>>>;
    public packageByRegExGet(body: string, xAuthorization: AuthenticationToken, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling packageByRegExGet.');
        }

        if (xAuthorization === null || xAuthorization === undefined) {
            throw new Error('Required parameter xAuthorization was null or undefined when calling packageByRegExGet.');
        }

        let headers = this.defaultHeaders;
        if (xAuthorization !== undefined && xAuthorization !== null) {
            headers = headers.set('X-Authorization', String(xAuthorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<PackageMetadata>>('post',`${this.basePath}/package/byRegEx`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param xAuthorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public packageCreate(body: PackageData, xAuthorization: AuthenticationToken, observe?: 'body', reportProgress?: boolean): Observable<ModelPackage>;
    public packageCreate(body: PackageData, xAuthorization: AuthenticationToken, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelPackage>>;
    public packageCreate(body: PackageData, xAuthorization: AuthenticationToken, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelPackage>>;
    public packageCreate(body: PackageData, xAuthorization: AuthenticationToken, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling packageCreate.');
        }

        if (xAuthorization === null || xAuthorization === undefined) {
            throw new Error('Required parameter xAuthorization was null or undefined when calling packageCreate.');
        }

        let headers = this.defaultHeaders;
        if (xAuthorization !== undefined && xAuthorization !== null) {
            headers = headers.set('X-Authorization', String(xAuthorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ModelPackage>('post',`${this.basePath}/package`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete this version of the package.
     * 
     * @param xAuthorization 
     * @param id Package ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public packageDelete(xAuthorization: AuthenticationToken, id: PackageID, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public packageDelete(xAuthorization: AuthenticationToken, id: PackageID, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public packageDelete(xAuthorization: AuthenticationToken, id: PackageID, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public packageDelete(xAuthorization: AuthenticationToken, id: PackageID, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (xAuthorization === null || xAuthorization === undefined) {
            throw new Error('Required parameter xAuthorization was null or undefined when calling packageDelete.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling packageDelete.');
        }

        let headers = this.defaultHeaders;
        if (xAuthorization !== undefined && xAuthorization !== null) {
            headers = headers.set('X-Authorization', String(xAuthorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/package/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param xAuthorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public packageRate(id: PackageID, xAuthorization: AuthenticationToken, observe?: 'body', reportProgress?: boolean): Observable<PackageRating>;
    public packageRate(id: PackageID, xAuthorization: AuthenticationToken, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PackageRating>>;
    public packageRate(id: PackageID, xAuthorization: AuthenticationToken, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PackageRating>>;
    public packageRate(id: PackageID, xAuthorization: AuthenticationToken, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling packageRate.');
        }

        if (xAuthorization === null || xAuthorization === undefined) {
            throw new Error('Required parameter xAuthorization was null or undefined when calling packageRate.');
        }

        let headers = this.defaultHeaders;
        if (xAuthorization !== undefined && xAuthorization !== null) {
            headers = headers.set('X-Authorization', String(xAuthorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PackageRating>('get',`${this.basePath}/package/${encodeURIComponent(String(id))}/rate`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Interact with the package with this ID
     * Return this package.
     * @param xAuthorization 
     * @param id ID of package to fetch
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public packageRetrieve(xAuthorization: AuthenticationToken, id: PackageID, observe?: 'body', reportProgress?: boolean): Observable<ModelPackage>;
    public packageRetrieve(xAuthorization: AuthenticationToken, id: PackageID, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelPackage>>;
    public packageRetrieve(xAuthorization: AuthenticationToken, id: PackageID, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelPackage>>;
    public packageRetrieve(xAuthorization: AuthenticationToken, id: PackageID, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (xAuthorization === null || xAuthorization === undefined) {
            throw new Error('Required parameter xAuthorization was null or undefined when calling packageRetrieve.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling packageRetrieve.');
        }

        let headers = this.defaultHeaders;
        if (xAuthorization !== undefined && xAuthorization !== null) {
            headers = headers.set('X-Authorization', String(xAuthorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ModelPackage>('get',`${this.basePath}/package/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update this content of the package.
     * The name, version, and ID must match.  The package contents (from PackageData) will replace the previous contents.
     * @param body 
     * @param xAuthorization 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public packageUpdate(body: ModelPackage, xAuthorization: AuthenticationToken, id: PackageID, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public packageUpdate(body: ModelPackage, xAuthorization: AuthenticationToken, id: PackageID, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public packageUpdate(body: ModelPackage, xAuthorization: AuthenticationToken, id: PackageID, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public packageUpdate(body: ModelPackage, xAuthorization: AuthenticationToken, id: PackageID, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling packageUpdate.');
        }

        if (xAuthorization === null || xAuthorization === undefined) {
            throw new Error('Required parameter xAuthorization was null or undefined when calling packageUpdate.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling packageUpdate.');
        }

        let headers = this.defaultHeaders;
        if (xAuthorization !== undefined && xAuthorization !== null) {
            headers = headers.set('X-Authorization', String(xAuthorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/package/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the packages from the registry.
     * Get any packages fitting the query. Search for packages satisfying the indicated query.  If you want to enumerate all packages, provide an array with a single PackageQuery whose name is \&quot;*\&quot;.  The response is paginated; the response header includes the offset to use in the next query.
     * @param body 
     * @param xAuthorization 
     * @param offset Provide this for pagination. If not provided, returns the first page of results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public packagesList(body: Array<PackageQuery>, xAuthorization: AuthenticationToken, offset?: EnumerateOffset, observe?: 'body', reportProgress?: boolean): Observable<Array<PackageMetadata>>;
    public packagesList(body: Array<PackageQuery>, xAuthorization: AuthenticationToken, offset?: EnumerateOffset, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PackageMetadata>>>;
    public packagesList(body: Array<PackageQuery>, xAuthorization: AuthenticationToken, offset?: EnumerateOffset, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PackageMetadata>>>;
    public packagesList(body: Array<PackageQuery>, xAuthorization: AuthenticationToken, offset?: EnumerateOffset, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling packagesList.');
        }

        if (xAuthorization === null || xAuthorization === undefined) {
            throw new Error('Required parameter xAuthorization was null or undefined when calling packagesList.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;
        if (xAuthorization !== undefined && xAuthorization !== null) {
            headers = headers.set('X-Authorization', String(xAuthorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<PackageMetadata>>('post',`${this.basePath}/packages`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reset the registry
     * Reset the registry to a system default state.
     * @param xAuthorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registryReset(xAuthorization: AuthenticationToken, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public registryReset(xAuthorization: AuthenticationToken, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public registryReset(xAuthorization: AuthenticationToken, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public registryReset(xAuthorization: AuthenticationToken, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (xAuthorization === null || xAuthorization === undefined) {
            throw new Error('Required parameter xAuthorization was null or undefined when calling registryReset.');
        }

        let headers = this.defaultHeaders;
        if (xAuthorization !== undefined && xAuthorization !== null) {
            headers = headers.set('X-Authorization', String(xAuthorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/reset`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
