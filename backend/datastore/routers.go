/*
 * ECE 461 - Spring 2023 - Project 2
 *
 * API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
 *
 * API version: 2.0.0
 * Contact: davisjam@purdue.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

 package api

 import (
	 "net/http"
	 "time"
	 "database/sql"
 
	 "github.com/gin-contrib/cors"
	 "github.com/gin-gonic/gin"
 )
 
 // Route is the information for every URI.
 type Route struct {
	 // Name is the name of this Route.
	 Name string
	 // Method is the string for the HTTP method. ex) GET, POST etc..
	 Method string
	 // Pattern is the pattern of the URI.
	 Pattern string
	 // HandlerFunc is the handler function of this route.
	 HandlerFunc gin.HandlerFunc
 }
 
 // Routes is the list of the generated Route.
 type Routes []Route
 
 // NewRouter returns a new router.
 func NewRouter(db *sql.DB) *gin.Engine {

	router := gin.Default()
	router.Use(VerifyConnection(db))	

	 router.Use(cors.New(cors.Config{
		 AllowOrigins:     []string{"*"},
		 AllowMethods:     []string{"*"},
		 AllowHeaders:     []string{"*"},
		 ExposeHeaders:    []string{"*"},
		 AllowCredentials: true,
		 MaxAge:           12 * time.Hour,
	 }))
	 for _, route := range routes {
		 switch route.Method {
		 case http.MethodGet:
			 router.GET(route.Pattern, route.HandlerFunc)
		 case http.MethodPost:
			 router.POST(route.Pattern, route.HandlerFunc)
		 case http.MethodPut:
			 router.PUT(route.Pattern, route.HandlerFunc)
		 case http.MethodPatch:
			 router.PATCH(route.Pattern, route.HandlerFunc)
		 case http.MethodDelete:
			 router.DELETE(route.Pattern, route.HandlerFunc)
		 }
	 }
 
	 return router
 }
 
 // Index is the index handler.
 func Index(c *gin.Context) {
	 c.String(http.StatusOK, "Hello World!")
 }
 
 var routes = Routes{
	 {
		 "Index",
		 http.MethodGet,
		 "/",
		 Index,
	 },
 
	//  {
	// 	 "CreateAuthToken",
	// 	 http.MethodPut,
	// 	 "/authenticate",
	// 	 CreateAuthToken,
	//  },
 
	 {
		 "PackageByNameDelete",
		 http.MethodDelete,
		 "/package/byName/:name",
		 PackageByNameDelete,
	 },
 
	//  {
	// 	 "PackageByNameGet",
	// 	 http.MethodGet,
	// 	 "/package/byName/:name",
	// 	 PackageByNameGet,
	//  },
 
	//  {
	// 	 "PackageByRegExGet",
	// 	 http.MethodPost,
	// 	 "/package/byRegEx",
	// 	 PackageByRegExGet,
	//  },
 
	 {
		 "PackageCreate",
		 http.MethodPost,
		 "/package/*id",
		 PackageCreate,
	 },
 
	 {
		 "PackageDelete",
		 http.MethodDelete,
		 "/package/:id",
		 PackageDelete,
	 },
 
	//  {
	// 	 "PackageRate",
	// 	 http.MethodGet,
	// 	 "/package/:id/rate",
	// 	 PackageRate,
	//  },
 
	 {
		 "PackageRetrieve",
		 http.MethodGet,
		 "/package/:id",
		 PackageRetrieve,
	 },
 
	 {
		 "PackageUpdate",
		 http.MethodPut,
		 "/package/:id",
		 PackageUpdate,
	 },
 
	//  {
	// 	 "PackagesList",
	// 	 http.MethodPost,
	// 	 "/packages",
	// 	 PackagesList,
	//  },
 
	//  {
	// 	 "RegistryReset",
	// 	 http.MethodDelete,
	// 	 "/reset",
	// 	 RegistryReset,
	//  },
 }
 